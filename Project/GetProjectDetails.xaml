<Activity mc:Ignorable="sap sap2010" x:Class="GetProjectDetails" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ufa="clr-namespace:UiPath.Forms.Activities;assembly=UiPath.Forms.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="readmeContents" Type="OutArgument(x:String)" />
    <x:Property Name="projectName" Type="OutArgument(x:String)" />
    <x:Property Name="githubRepoName" Type="OutArgument(x:String)" />
    <x:Property Name="queueName" Type="OutArgument(x:String)" />
    <x:Property Name="shouldCreateQueue" Type="OutArgument(x:String)" />
    <x:Property Name="shouldUseUniqueQueueReference" Type="OutArgument(x:String)" />
    <x:Property Name="createButton" Type="OutArgument(x:String)" />
    <x:Property Name="cancelButton" Type="OutArgument(x:String)" />
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="orchestratorFolder" Type="OutArgument(x:String)" />
    <x:Property Name="githubRepoDescription" Type="OutArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>GetProjectDetails_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>UiPath.Studio.Forms.Runtime</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.Forms.Activities</x:String>
      <x:String>UiPath.Platform.GlobalVariables</x:String>
      <x:String>UiPath.Forms.Activities.Base</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
      <x:String>UiPath.Web.Activities.JSON.Models</x:String>
      <x:String>UiPath.Web.Activities.JSON</x:String>
      <x:String>UiPath.Sdk.Activities</x:String>
      <x:String>UiPath.Sdk.Activities.DependencyInjection</x:String>
      <x:String>UiPath.Sdk.Activities.DependencyInjection.Contracts</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>UiPath.Platform.Triggers</x:String>
      <x:String>UiPath.Platform.Triggers.Scope</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Forms.Runtime</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Forms.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.CodeDom</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>NPOI.Core</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="GetProjectDetails" sap:VirtualizedContainerService.HintSize="902,3034.4" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Object" Name="formCache" />
      <Variable x:TypeArguments="x:String" Name="processDetails" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Sequence sap:VirtualizedContainerService.HintSize="553.6,3011.2" sap2010:WorkflowViewState.IdRef="Sequence_2">
      <Sequence.Variables>
        <Variable x:TypeArguments="scg:List(x:String)" Name="existingProcesses" />
        <Variable x:TypeArguments="scg:List(x:String)" Name="listOfOrchestratorFolders" />
        <Variable x:TypeArguments="x:String" Name="companyName" />
        <Variable x:TypeArguments="x:String" Name="rpaLocalRepository" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="520,180" sap2010:WorkflowViewState.IdRef="MultipleAssign_5">
        <ui:MultipleAssign.AssignOperations>
          <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_13">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[rpaLocalRepository]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_Config("RpaLocalRepositoryFolder").ToString()]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_15">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="scg:List(x:String)">[listOfOrchestratorFolders]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="scg:List(x:String)">[in_Config("StringListOfOrchestratorFolders").ToString().Split(","c).ToList()]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
          </scg:List>
        </ui:MultipleAssign.AssignOperations>
      </ui:MultipleAssign>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="First we get orchestrator artifacts which includes the existing processes on the ochestartor as well as all other information" DisplayName="GetOrchestratorArtifacts" sap:VirtualizedContainerService.HintSize="520,236.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Project\GetOrchestratorArtifacts.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="processNames">[existingProcesses]</OutArgument>
          <InArgument x:TypeArguments="scg:List(x:String)" x:Key="in_ListOfOrchestratorFolders">[listOfOrchestratorFolders]</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <ui:MultipleAssign sap2010:Annotation.AnnotationText="Initialize variables that would be needed to load form" DisplayName="Initialize Variables" sap:VirtualizedContainerService.HintSize="520,336" sap2010:WorkflowViewState.IdRef="MultipleAssign_4">
        <ui:MultipleAssign.AssignOperations>
          <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_7">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[projectName]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">
                  <Literal x:TypeArguments="x:String" Value="" />
                </InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_8">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[processDetails]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">
                  <Literal x:TypeArguments="x:String" Value="" />
                </InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_9">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[cancelButton]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">false</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_10">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[createButton]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">false</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_11">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:String">[companyName]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:String">[in_Config("CompanyName").ToString()]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_12">
              <ui:AssignOperation.To>
                <OutArgument x:TypeArguments="x:Object">[formCache]</OutArgument>
              </ui:AssignOperation.To>
              <ui:AssignOperation.Value>
                <InArgument x:TypeArguments="x:Object" xml:space="preserve">[New Dictionary(Of String, Object) From {
    {"projectName", ""},
    {"orchestratorFolder", ""},
    {"processDescription", ""},
    {"shouldCreateQueue", ""},
    {"shouldUseUniqueQueueReference", ""}
}]</InArgument>
              </ui:AssignOperation.Value>
            </ui:AssignOperation>
          </scg:List>
        </ui:MultipleAssign.AssignOperations>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:MultipleAssign>
      <ufa:ShowFormActivity Height="{x:Null}" InstanceName="{x:Null}" Left="{x:Null}" ShowInTaskbar="{x:Null}" ShowMargin="{x:Null}" Top="{x:Null}" TopMost="{x:Null}" Width="{x:Null}" DisplayName="Show Form" FormId="fe88d951-b636-4948-9fc7-eaac1cce36ef" sap:VirtualizedContainerService.HintSize="520,219.2" sap2010:WorkflowViewState.IdRef="ShowFormActivity_2" IsAsync="True" Title="RPA Project Creator" WindowState="[UiPath.Studio.Forms.Runtime.WindowState.Maximized]">
        <ufa:ShowFormActivity.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="formLabel">[companyName+" RPA Project Creator"]</InArgument>
          <InArgument x:TypeArguments="scg:IEnumerable(x:String)" x:Key="OrchestratorFolder.Items">[listOfOrchestratorFolders]</InArgument>
          <InArgument x:TypeArguments="scg:List(x:String)" x:Key="existingProcesses">[existingProcesses.ToList()]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="showSpinner">false</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="showCompletePanel">false</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="showInputPanel">true</InArgument>
        </ufa:ShowFormActivity.Arguments>
      </ufa:ShowFormActivity>
      <ufa:SetFormFieldsActivity InstanceName="{x:Null}" DisplayName="Set Form Values" FormId="fe88d951-b636-4948-9fc7-eaac1cce36ef" sap:VirtualizedContainerService.HintSize="520,172.8" sap2010:WorkflowViewState.IdRef="SetFormFieldsActivity_8">
        <ufa:SetFormFieldsActivity.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="shouldCreateQueue">true</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="showInputPanel">true</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="shouldUseUniqueQueueReference">true</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="showSpinner">false</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="showCompletePanel">false</InArgument>
        </ufa:SetFormFieldsActivity.Arguments>
      </ufa:SetFormFieldsActivity>
      <ui:InterruptibleDoWhile CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="3.) This do while acvity While waiting for the user to click Create or Cancel " Condition="[Not (createButton.ToLower().Equals(&quot;true&quot;) Or cancelButton.ToLower().Equals(&quot;true&quot;))]" DisplayName="Do While" sap:VirtualizedContainerService.HintSize="520,1617.6" sap2010:WorkflowViewState.IdRef="InterruptibleDoWhile_2">
        <ui:InterruptibleDoWhile.Body>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="518.4,1456" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="wasValidPascalCase" />
              <Variable x:TypeArguments="x:String" Name="externalFormError" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ufa:GetFormFieldsActivity InstanceName="{x:Null}" DisplayName="Get Form Values" FormId="fe88d951-b636-4948-9fc7-eaac1cce36ef" sap:VirtualizedContainerService.HintSize="484.8,172.8" sap2010:WorkflowViewState.IdRef="GetFormFieldsActivity_3">
              <ufa:GetFormFieldsActivity.Arguments>
                <OutArgument x:TypeArguments="x:String" x:Key="ProjectName">[projectName]</OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="OrchestratorFolder">[orchestratorFolder]</OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="ProcessDescription">[processDetails]</OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="GithubRepoName">[githubRepoName]</OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="QueueName">[queueName]</OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="shouldCreateQueue">[shouldCreateQueue]</OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="shouldUseUniqueQueueReference">[shouldUseUniqueQueueReference]</OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="CreateButton">[createButton]</OutArgument>
                <OutArgument x:TypeArguments="x:String" x:Key="CancelButton">[cancelButton]</OutArgument>
                <OutArgument x:TypeArguments="x:Object" x:Key="FormCache">[formCache]</OutArgument>
              </ufa:GetFormFieldsActivity.Arguments>
            </ufa:GetFormFieldsActivity>
            <If sap2010:Annotation.AnnotationText="turn off main panel because create button is clicked and send cached data back to form " Condition="[createButton.ToLower().Equals(&quot;true&quot;)]" sap:VirtualizedContainerService.HintSize="484.8,101.6" sap2010:WorkflowViewState.IdRef="If_5">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="468,341" sap2010:WorkflowViewState.IdRef="Sequence_22">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign sap:VirtualizedContainerService.HintSize="434,116" sap2010:WorkflowViewState.IdRef="Assign_5">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Object">[formCache]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Object" xml:space="preserve">[New Dictionary(Of String, Object) From {
    {"projectName", projectName},
    {"orchestratorFolder", orchestratorFolder},
    {"processDescription", processDetails},
    {"shouldCreateQueue", shouldCreateQueue},
    {"shouldUseUniqueQueueReference", shouldUseUniqueQueueReference}
}]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ufa:SetFormFieldsActivity InstanceName="{x:Null}" DisplayName="Set Form Values" FormId="fe88d951-b636-4948-9fc7-eaac1cce36ef" sap:VirtualizedContainerService.HintSize="434,165" sap2010:WorkflowViewState.IdRef="SetFormFieldsActivity_9">
                    <ufa:SetFormFieldsActivity.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="showInputPanel">false</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="ProjectName">[projectName]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="showSpinner">true</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="showCompletePanel">false</InArgument>
                    </ufa:SetFormFieldsActivity.Arguments>
                  </ufa:SetFormFieldsActivity>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence sap2010:Annotation.AnnotationText="" DisplayName="Else" sap:VirtualizedContainerService.HintSize="468,121" sap2010:WorkflowViewState.IdRef="Sequence_23">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Sequence>
              </If.Else>
            </If>
            <If sap2010:Annotation.AnnotationText="Check if a local folder is present with same name" Condition="[Directory.Exists(Path.Combine(rpaLocalRepository,projectName)) AndAlso createButton.ToLower().Equals(&quot;true&quot;)]" sap:VirtualizedContainerService.HintSize="484.8,88" sap2010:WorkflowViewState.IdRef="If_6">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="512,436" sap2010:WorkflowViewState.IdRef="Sequence_25">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="478.4,212" sap2010:WorkflowViewState.IdRef="MultipleAssign_6">
                    <ui:MultipleAssign.AssignOperations>
                      <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_16">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="x:String">[cancelButton]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="x:String">false</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_17">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="x:String">[createButton]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="x:String">false</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_18">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="x:String">[externalFormError]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="x:String">["A folder with name ["+projectName+"] already exists in ["+ rpaLocalRepository+"]. please delete or relocate"]</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                      </scg:List>
                    </ui:MultipleAssign.AssignOperations>
                  </ui:MultipleAssign>
                  <ufa:SetFormFieldsActivity InstanceName="{x:Null}" DisplayName="Set Form Values" FormId="fe88d951-b636-4948-9fc7-eaac1cce36ef" sap:VirtualizedContainerService.HintSize="478.4,164" sap2010:WorkflowViewState.IdRef="SetFormFieldsActivity_12">
                    <ufa:SetFormFieldsActivity.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="showInputPanel">true</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="CreateButton">[createButton]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="CancelButton">[cancelButton]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="externalFormError">[externalFormError]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="ProjectName">[ProjectName]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="showSpinner">false</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="showCompletePanel">false</InArgument>
                    </ufa:SetFormFieldsActivity.Arguments>
                  </ufa:SetFormFieldsActivity>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="512,89.6" sap2010:WorkflowViewState.IdRef="Sequence_26">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Sequence>
              </If.Else>
            </If>
            <If sap2010:Annotation.AnnotationText="Validate pascal case for naming convention" Condition="[createButton.ToLower().Equals(&quot;true&quot;)]" DisplayName="If Create button clicked then check if its a valid pascal case" sap:VirtualizedContainerService.HintSize="484.8,852.8" sap2010:WorkflowViewState.IdRef="If_2">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="483.2,593.6" sap2010:WorkflowViewState.IdRef="Sequence_6">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Sequence sap2010:Annotation.AnnotationText="Validate pascal case for naming convention" sap:VirtualizedContainerService.HintSize="449.6,533.6" sap2010:WorkflowViewState.IdRef="Sequence_8">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Generate Readme using Generative Ai" DisplayName="UseGenerativeAIResponse" sap:VirtualizedContainerService.HintSize="416,207.2" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_6" UnSafe="False" WorkflowFileName="Project\UseGenerativeAIResponse.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <OutArgument x:TypeArguments="x:String" x:Key="errorResponse">[externalFormError]</OutArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="userPrompt">[projectName]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="systemPrompt">[File.ReadAllText("Data\PromptToValidatePascalCase.txt")]</InArgument>
                        <OutArgument x:TypeArguments="x:String" x:Key="response">[wasValidPascalCase]</OutArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:InvokeWorkflowFile>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Upon an error , this resets certain values on the form with the arguments provided" DisplayName="ResetFormOnError" sap:VirtualizedContainerService.HintSize="416,212" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_8" UnSafe="False" WorkflowFileName="Project\ResetFormOnError.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="externalFormError">[if(Not String.IsNullOrEmpty(wasValidPascalCase) AndAlso Boolean.TryParse(wasValidPascalCase,Nothing) AndAlso Boolean.Parse(wasValidPascalCase),"","project name was not a valid pascal case")]</InArgument>
                        <InOutArgument x:TypeArguments="x:String" x:Key="cancelButton">[cancelButton]</InOutArgument>
                        <InOutArgument x:TypeArguments="x:String" x:Key="createButton">[createButton]</InOutArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="ProjectName">[projectName]</InArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:InvokeWorkflowFile>
                  </Sequence>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="483.2,89.6" sap2010:WorkflowViewState.IdRef="Sequence_7">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Sequence>
              </If.Else>
            </If>
            <If sap2010:Annotation.AnnotationText="use gen ai to generate readme contents " Condition="[createButton.ToLower().Equals(&quot;true&quot;)]" DisplayName="If Create button clicked - use gen ai to generate readme contents " sap:VirtualizedContainerService.HintSize="484.8,88" sap2010:WorkflowViewState.IdRef="If_3">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="472.8,479.2" sap2010:WorkflowViewState.IdRef="Sequence_15">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Generate Readme using Generative Ai" DisplayName="UseGenerativeAIResponse" sap:VirtualizedContainerService.HintSize="439.2,207.2" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_10" UnSafe="False" WorkflowFileName="Project\UseGenerativeAIResponse.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <OutArgument x:TypeArguments="x:String" x:Key="errorResponse">[externalFormError]</OutArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="userPrompt">[processDetails]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="systemPrompt">[File.ReadAllText("Data\PromptToGenerateReadme.txt")]</InArgument>
                      <OutArgument x:TypeArguments="x:String" x:Key="response">[readmeContents]</OutArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:InvokeWorkflowFile>
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Upon an error , this resets certain values on the form with the arguments provided" DisplayName="ResetFormOnError" sap:VirtualizedContainerService.HintSize="439.2,212" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" UnSafe="False" WorkflowFileName="Project\ResetFormOnError.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="externalFormError">[externalFormError]</InArgument>
                      <InOutArgument x:TypeArguments="x:String" x:Key="cancelButton">[cancelButton]</InOutArgument>
                      <InOutArgument x:TypeArguments="x:String" x:Key="createButton">[createButton]</InOutArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="ProjectName">[projectName]</InArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:InvokeWorkflowFile>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="472.8,89.6" sap2010:WorkflowViewState.IdRef="Sequence_21">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Sequence>
              </If.Else>
            </If>
            <If sap2010:Annotation.AnnotationText="use gen ai to generate process description contents " Condition="[createButton.ToLower().Equals(&quot;true&quot;)]" DisplayName="If Create button clicked - use gen ai to generate process description" sap:VirtualizedContainerService.HintSize="484.8,92.8" sap2010:WorkflowViewState.IdRef="If_7">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="484,479.2" sap2010:WorkflowViewState.IdRef="Sequence_28">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Generate Readme using Generative Ai" DisplayName="UseGenerativeAIResponse" sap:VirtualizedContainerService.HintSize="450.4,207.2" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_13" UnSafe="False" WorkflowFileName="Project\UseGenerativeAIResponse.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <OutArgument x:TypeArguments="x:String" x:Key="errorResponse">[externalFormError]</OutArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="userPrompt">[processDetails]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="systemPrompt">[File.ReadAllText("Data\PromptToGenerateDescription.txt")]</InArgument>
                      <OutArgument x:TypeArguments="x:String" x:Key="response">[githubRepoDescription]</OutArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:InvokeWorkflowFile>
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Upon an error , this resets certain values on the form with the arguments provided" DisplayName="ResetFormOnError" sap:VirtualizedContainerService.HintSize="450.4,212" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_14" UnSafe="False" WorkflowFileName="Project\ResetFormOnError.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="externalFormError">[externalFormError]</InArgument>
                      <InOutArgument x:TypeArguments="x:String" x:Key="cancelButton">[cancelButton]</InOutArgument>
                      <InOutArgument x:TypeArguments="x:String" x:Key="createButton">[createButton]</InOutArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="ProjectName">[projectName]</InArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:InvokeWorkflowFile>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="484,89.6" sap2010:WorkflowViewState.IdRef="Sequence_29">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Sequence>
              </If.Else>
            </If>
          </Sequence>
        </ui:InterruptibleDoWhile.Body>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InterruptibleDoWhile>
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="520,165.6" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;initilaized&quot;]" />
    </Sequence>
  </Sequence>
</Activity>